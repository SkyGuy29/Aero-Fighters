.TH "Object" 3 "Version v0.1" "Aero Fighters" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Object \- The base class for everything that moves\&. Making this allows us to use polymorphism to handle and run through every object in the game in a little neater manner\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <Object\&.h>\fP
.PP
Inherits sf::Drawable\&.
.PP
Inherited by \fBCollectable\fP, \fBEnemy\fP, \fBPlayer\fP, and \fBProjectile\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTypes\fP { \fBHIDDEN\fP =-1, \fBPLAYER\fP = 0, \fBBOSS\fP = 1, \fBBOSS_PIECE\fP = 2, \fBAIR\fP = 3, \fBLAND\fP = 4, \fBCOLLECTABLE\fP = 5, \fBPLAYER_PROJECTILE\fP = 6, \fBENEMY_PROJECTILE\fP = 7, \fBEXPLOSION\fP = 8 }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBObject\fP ()"
.br
.ti -1c
.RI "virtual void \fBupdate\fP (sf::Vector2f winSize, std::vector< \fBObject\fP * > *, bool time)=0"
.br
.ti -1c
.RI "void \fBobjectUpdate\fP (sf::Vector2f winSize, std::vector< \fBObject\fP * > *)"
.br
.RI "Calls Object::move(winSize) (??? what is the point?) "
.ti -1c
.RI "virtual void \fBmove\fP (sf::Vector2f winSize)"
.br
.ti -1c
.RI "void \fBsetPos\fP (sf::Vector2f newPos)"
.br
.ti -1c
.RI "void \fBsetPos\fP (float newPosX, float newPosY)"
.br
.ti -1c
.RI "void \fBsetSize\fP (sf::Vector2f newSize)"
.br
.ti -1c
.RI "void \fBsetSize\fP (float newSizeX, float newSizeY)"
.br
.ti -1c
.RI "void \fBsetVel\fP (sf::Vector2f)"
.br
.ti -1c
.RI "void \fBsetVel\fP (float, float)"
.br
.ti -1c
.RI "void \fBsetSpriteNum\fP (short)"
.br
.ti -1c
.RI "void \fBsetTexture\fP (sf::Texture *texPtr, sf::Vector2i \fBsize\fP, sf::Vector2i offset, int \fBframeCount\fP, bool vertAnimation)"
.br
.RI "The purpose of this method is to load a texture in \fBLevel\fP or \fBGame\fP once, then cheaply load it again multiple times\&. "
.ti -1c
.RI "sf::Vector2f \fBgetVel\fP () const"
.br
.ti -1c
.RI "bool \fBoutOfBounds\fP (sf::Vector2f winSize) const"
.br
.RI "Returns if any part of an object is outside the viewing area\&. "
.ti -1c
.RI "void \fBflagDelete\fP ()"
.br
.ti -1c
.RI "bool \fBshouldDelete\fP () const"
.br
.ti -1c
.RI "sf::Vector2f \fBgetPos\fP () const"
.br
.ti -1c
.RI "sf::Vector2f \fBgetSize\fP () const"
.br
.ti -1c
.RI "bool \fBintersect\fP (\fBObject\fP *) const"
.br
.ti -1c
.RI "short \fBgetType\fP () const"
.br
.ti -1c
.RI "short \fBgetId\fP () const"
.br
.ti -1c
.RI "short \fBgetSpriteNum\fP () const"
.br
.ti -1c
.RI "short \fBgetOrientation\fP () const"
.br
.ti -1c
.RI "void \fBsetOrientation\fP (short)"
.br
.ti -1c
.RI "bool \fBisTexInit\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBsetView\fP (sf::View new_view)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdraw\fP (sf::RenderTarget &target, sf::RenderStates states) const"
.br
.RI "Draws the object to the screen\&. Implemeneted from sf::Drawable\&. "
.ti -1c
.RI "void \fBnextFrame\fP (int frameRate)"
.br
.RI "This animator allows for different frame changes\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "short \fBtype\fP"
.br
.ti -1c
.RI "short \fBid\fP = 0"
.br
.ti -1c
.RI "short \fBcooldown\fP = 0"
.br
.ti -1c
.RI "short \fBhealth\fP"
.br
.ti -1c
.RI "short \fBspriteNum\fP = \-1"
.br
.ti -1c
.RI "short \fBorientation\fP = 0"
.br
.ti -1c
.RI "short \fBtimer\fP = 0"
.br
.ti -1c
.RI "bool \fBdel\fP = false"
.br
.ti -1c
.RI "sf::Vector2f \fBpos\fP"
.br
.ti -1c
.RI "sf::Vector2f \fBsize\fP"
.br
.ti -1c
.RI "sf::Vector2f \fBvel\fP"
.br
.ti -1c
.RI "sf::RectangleShape \fBsprite\fP"
.br
.ti -1c
.RI "float * \fBbackgroundSpeed\fP = nullptr"
.br
.ti -1c
.RI "float * \fBbackgroundDist\fP = nullptr"
.br
.ti -1c
.RI "short \fBframeCount\fP = 0"
.br
.ti -1c
.RI "short \fBcurrentFrame\fP = 0"
.br
.ti -1c
.RI "short \fBimage\fP"
.br
.ti -1c
.RI "sf::Vector2i \fBtexSize\fP"
.br
.ti -1c
.RI "sf::Vector2i \fBtexOffset\fP"
.br
.ti -1c
.RI "bool \fBverticalAnimation\fP = true"
.br
.ti -1c
.RI "bool \fBanDone\fP = false"
.br
.ti -1c
.RI "bool \fBtexInit\fP = false"
.br
.ti -1c
.RI "const float \fBPI\fP = 3\&.14159f"
.br
.ti -1c
.RI "const float \fBTO_RAD\fP = \fBPI\fP / 180\&.f"
.br
.ti -1c
.RI "const float \fBTO_DEG\fP = 180\&.f / \fBPI\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static sf::View \fBview\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The base class for everything that moves\&. Making this allows us to use polymorphism to handle and run through every object in the game in a little neater manner\&. 

@TODO@ Split into more base classes\&. 
.PP
Definition at line \fB14\fP of file \fBObject\&.h\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBObject::Types\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIHIDDEN \fP
.TP
\f(BIPLAYER \fP
.TP
\f(BIBOSS \fP
.TP
\f(BIBOSS_PIECE \fP
.TP
\f(BIAIR \fP
.TP
\f(BILAND \fP
.TP
\f(BICOLLECTABLE \fP
.TP
\f(BIPLAYER_PROJECTILE \fP
.TP
\f(BIENEMY_PROJECTILE \fP
.TP
\f(BIEXPLOSION \fP
.PP
Definition at line \fB63\fP of file \fBObject\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Object::Object ()"

.PP
Definition at line \fB13\fP of file \fBObject\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Object::draw (sf::RenderTarget & target, sf::RenderStates states) const\fR [protected]\fP, \fR [virtual]\fP"

.PP
Draws the object to the screen\&. Implemeneted from sf::Drawable\&. 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP 
.br
\fIstates\fP 
.RE
.PP

.PP
Definition at line \fB39\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::flagDelete ()\fR [inline]\fP"

.PP
Definition at line \fB46\fP of file \fBObject\&.h\fP\&.
.SS "short Object::getId () const\fR [inline]\fP"

.PP
Definition at line \fB55\fP of file \fBObject\&.h\fP\&.
.SS "short Object::getOrientation () const\fR [inline]\fP"

.PP
Definition at line \fB58\fP of file \fBObject\&.h\fP\&.
.SS "sf::Vector2f Object::getPos () const\fR [inline]\fP"

.PP
Definition at line \fB49\fP of file \fBObject\&.h\fP\&.
.SS "sf::Vector2f Object::getSize () const\fR [inline]\fP"

.PP
Definition at line \fB50\fP of file \fBObject\&.h\fP\&.
.SS "short Object::getSpriteNum () const\fR [inline]\fP"

.PP
Definition at line \fB56\fP of file \fBObject\&.h\fP\&.
.SS "short Object::getType () const\fR [inline]\fP"

.PP
Definition at line \fB54\fP of file \fBObject\&.h\fP\&.
.SS "sf::Vector2f Object::getVel () const\fR [inline]\fP"

.PP
Definition at line \fB42\fP of file \fBObject\&.h\fP\&.
.SS "bool Object::intersect (\fBObject\fP * targetPtr) const"

.PP
Definition at line \fB116\fP of file \fBObject\&.cpp\fP\&.
.SS "bool Object::isTexInit () const\fR [inline]\fP"

.PP
Definition at line \fB61\fP of file \fBObject\&.h\fP\&.
.SS "void Object::move (sf::Vector2f winSize)\fR [virtual]\fP"

.PP
Reimplemented in \fBPlayer\fP\&.
.PP
Definition at line \fB132\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::nextFrame (int frameRate = \fR15\fP)\fR [protected]\fP"

.PP
This animator allows for different frame changes\&. @TODO@ Move to seperate sprite container class - Unweave the inheritance web - Ricky

.PP
\fBParameters\fP
.RS 4
\fIframeRate\fP 
.RE
.PP

.PP
Definition at line \fB69\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::objectUpdate (sf::Vector2f winSize, std::vector< \fBObject\fP * > * objects)"

.PP
Calls Object::move(winSize) (??? what is the point?) @TODO@ Base class version is never called - Declare pure virtual\&. - Ricky

.PP
\fBParameters\fP
.RS 4
\fIwinSize\fP 
.br
\fIobjects\fP 
.RE
.PP

.PP
Definition at line \fB28\fP of file \fBObject\&.cpp\fP\&.
.SS "bool Object::outOfBounds (sf::Vector2f winSize) const"

.PP
Returns if any part of an object is outside the viewing area\&. 
.PP
\fBParameters\fP
.RS 4
\fIwinSize\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Definition at line \fB192\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setOrientation (short angle)"

.PP
Definition at line \fB56\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setPos (float newPosX, float newPosY)"

.PP
Definition at line \fB150\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setPos (sf::Vector2f newPos)"

.PP
Definition at line \fB141\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setSize (float newSizeX, float newSizeY)"

.PP
Definition at line \fB166\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setSize (sf::Vector2f newSize)"

.PP
Definition at line \fB158\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setSpriteNum (short num)"

.PP
Definition at line \fB47\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setTexture (sf::Texture * texPtr, sf::Vector2i size, sf::Vector2i offset, int frameCount, bool vertAnimation)"

.PP
The purpose of this method is to load a texture in \fBLevel\fP or \fBGame\fP once, then cheaply load it again multiple times\&. 
.PP
\fBParameters\fP
.RS 4
\fItexPtr\fP 
.br
\fIsize\fP 
.br
\fIoffset\fP 
.br
\fIframeCount\fP 
.br
\fIvertAnimation\fP 
.RE
.PP

.PP
Definition at line \fB101\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setVel (float x, float y)"

.PP
Definition at line \fB180\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setVel (sf::Vector2f newVel)"

.PP
Definition at line \fB172\fP of file \fBObject\&.cpp\fP\&.
.SS "void Object::setView (sf::View new_view)\fR [static]\fP"

.PP
Definition at line \fB7\fP of file \fBObject\&.cpp\fP\&.
.SS "bool Object::shouldDelete () const\fR [inline]\fP"

.PP
Definition at line \fB47\fP of file \fBObject\&.h\fP\&.
.SS "virtual void Object::update (sf::Vector2f winSize, std::vector< \fBObject\fP * > * , bool time)\fR [pure virtual]\fP"

.PP
Implemented in \fBAir\fP, \fBBoss\fP, \fBCollectable\fP, \fBExplosion\fP, \fBLand\fP, \fBPlayer\fP, and \fBProjectile\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "bool Object::anDone = false\fR [protected]\fP"

.PP
Definition at line \fB129\fP of file \fBObject\&.h\fP\&.
.SS "float* Object::backgroundDist = nullptr\fR [protected]\fP"

.PP
Definition at line \fB115\fP of file \fBObject\&.h\fP\&.
.SS "float* Object::backgroundSpeed = nullptr\fR [protected]\fP"

.PP
Definition at line \fB112\fP of file \fBObject\&.h\fP\&.
.SS "short Object::cooldown = 0\fR [protected]\fP"

.PP
Definition at line \fB86\fP of file \fBObject\&.h\fP\&.
.SS "short Object::currentFrame = 0\fR [protected]\fP"

.PP
Definition at line \fB121\fP of file \fBObject\&.h\fP\&.
.SS "bool Object::del = false\fR [protected]\fP"

.PP
Definition at line \fB95\fP of file \fBObject\&.h\fP\&.
.SS "short Object::frameCount = 0\fR [protected]\fP"

.PP
Definition at line \fB121\fP of file \fBObject\&.h\fP\&.
.SS "short Object::health\fR [protected]\fP"

.PP
Definition at line \fB88\fP of file \fBObject\&.h\fP\&.
.SS "short Object::id = 0\fR [protected]\fP"

.PP
Definition at line \fB84\fP of file \fBObject\&.h\fP\&.
.SS "short Object::image\fR [protected]\fP"

.PP
Definition at line \fB124\fP of file \fBObject\&.h\fP\&.
.SS "short Object::orientation = 0\fR [protected]\fP"

.PP
Definition at line \fB91\fP of file \fBObject\&.h\fP\&.
.SS "const float Object::PI = 3\&.14159f\fR [protected]\fP"

.PP
Definition at line \fB139\fP of file \fBObject\&.h\fP\&.
.SS "sf::Vector2f Object::pos\fR [protected]\fP"

.PP
Definition at line \fB98\fP of file \fBObject\&.h\fP\&.
.SS "sf::Vector2f Object::size\fR [protected]\fP"

.PP
Definition at line \fB100\fP of file \fBObject\&.h\fP\&.
.SS "sf::RectangleShape Object::sprite\fR [protected]\fP"

.PP
Definition at line \fB105\fP of file \fBObject\&.h\fP\&.
.SS "short Object::spriteNum = \-1\fR [protected]\fP"

.PP
Definition at line \fB90\fP of file \fBObject\&.h\fP\&.
.SS "bool Object::texInit = false\fR [protected]\fP"

.PP
Definition at line \fB132\fP of file \fBObject\&.h\fP\&.
.SS "sf::Vector2i Object::texOffset\fR [protected]\fP"

.PP
Definition at line \fB126\fP of file \fBObject\&.h\fP\&.
.SS "sf::Vector2i Object::texSize\fR [protected]\fP"

.PP
Definition at line \fB126\fP of file \fBObject\&.h\fP\&.
.SS "short Object::timer = 0\fR [protected]\fP"

.PP
Definition at line \fB92\fP of file \fBObject\&.h\fP\&.
.SS "const float Object::TO_DEG = 180\&.f / \fBPI\fP\fR [protected]\fP"

.PP
Definition at line \fB139\fP of file \fBObject\&.h\fP\&.
.SS "const float Object::TO_RAD = \fBPI\fP / 180\&.f\fR [protected]\fP"

.PP
Definition at line \fB139\fP of file \fBObject\&.h\fP\&.
.SS "short Object::type\fR [protected]\fP"

.PP
Definition at line \fB82\fP of file \fBObject\&.h\fP\&.
.SS "sf::Vector2f Object::vel\fR [protected]\fP"

.PP
Definition at line \fB102\fP of file \fBObject\&.h\fP\&.
.SS "bool Object::verticalAnimation = true\fR [protected]\fP"

.PP
Definition at line \fB129\fP of file \fBObject\&.h\fP\&.
.SS "sf::View Object::view\fR [static]\fP, \fR [protected]\fP"

.PP
Definition at line \fB135\fP of file \fBObject\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Aero Fighters from the source code\&.
